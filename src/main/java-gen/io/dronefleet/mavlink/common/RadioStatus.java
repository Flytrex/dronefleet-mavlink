package io.dronefleet.mavlink.common;

import io.dronefleet.mavlink.annotations.MavlinkMessage;
import io.dronefleet.mavlink.annotations.MavlinkMessageField;

/**
 * Status generated by radio and injected into MAVLink stream. 
 */
@MavlinkMessage(
    id = 109,
    crc = 185
)
public final class RadioStatus {
  /**
   * Local signal strength 
   */
  private final int rssi;

  /**
   * Remote signal strength 
   */
  private final int remrssi;

  /**
   * Remaining free buffer space in percent. 
   */
  private final int txbuf;

  /**
   * Background noise level 
   */
  private final int noise;

  /**
   * Remote background noise level 
   */
  private final int remnoise;

  /**
   * Receive errors 
   */
  private final int rxerrors;

  /**
   * Count of error corrected packets 
   */
  private final int fixed;

  private RadioStatus(int rssi, int remrssi, int txbuf, int noise, int remnoise, int rxerrors,
      int fixed) {
    this.rssi = rssi;
    this.remrssi = remrssi;
    this.txbuf = txbuf;
    this.noise = noise;
    this.remnoise = remnoise;
    this.rxerrors = rxerrors;
    this.fixed = fixed;
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Local signal strength 
   */
  @MavlinkMessageField(
      position = 1,
      length = 1
  )
  public final int rssi() {
    return rssi;
  }

  /**
   * Remote signal strength 
   */
  @MavlinkMessageField(
      position = 2,
      length = 1
  )
  public final int remrssi() {
    return remrssi;
  }

  /**
   * Remaining free buffer space in percent. 
   */
  @MavlinkMessageField(
      position = 3,
      length = 1
  )
  public final int txbuf() {
    return txbuf;
  }

  /**
   * Background noise level 
   */
  @MavlinkMessageField(
      position = 4,
      length = 1
  )
  public final int noise() {
    return noise;
  }

  /**
   * Remote background noise level 
   */
  @MavlinkMessageField(
      position = 5,
      length = 1
  )
  public final int remnoise() {
    return remnoise;
  }

  /**
   * Receive errors 
   */
  @MavlinkMessageField(
      position = 6,
      length = 2
  )
  public final int rxerrors() {
    return rxerrors;
  }

  /**
   * Count of error corrected packets 
   */
  @MavlinkMessageField(
      position = 7,
      length = 2
  )
  public final int fixed() {
    return fixed;
  }

  public static class Builder {
    private int rssi;

    private int remrssi;

    private int txbuf;

    private int noise;

    private int remnoise;

    private int rxerrors;

    private int fixed;

    private Builder() {
    }

    /**
     * Local signal strength 
     */
    @MavlinkMessageField(
        position = 1,
        length = 1
    )
    public final Builder rssi(int rssi) {
      this.rssi = rssi;
      return this;
    }

    /**
     * Remote signal strength 
     */
    @MavlinkMessageField(
        position = 2,
        length = 1
    )
    public final Builder remrssi(int remrssi) {
      this.remrssi = remrssi;
      return this;
    }

    /**
     * Remaining free buffer space in percent. 
     */
    @MavlinkMessageField(
        position = 3,
        length = 1
    )
    public final Builder txbuf(int txbuf) {
      this.txbuf = txbuf;
      return this;
    }

    /**
     * Background noise level 
     */
    @MavlinkMessageField(
        position = 4,
        length = 1
    )
    public final Builder noise(int noise) {
      this.noise = noise;
      return this;
    }

    /**
     * Remote background noise level 
     */
    @MavlinkMessageField(
        position = 5,
        length = 1
    )
    public final Builder remnoise(int remnoise) {
      this.remnoise = remnoise;
      return this;
    }

    /**
     * Receive errors 
     */
    @MavlinkMessageField(
        position = 6,
        length = 2
    )
    public final Builder rxerrors(int rxerrors) {
      this.rxerrors = rxerrors;
      return this;
    }

    /**
     * Count of error corrected packets 
     */
    @MavlinkMessageField(
        position = 7,
        length = 2
    )
    public final Builder fixed(int fixed) {
      this.fixed = fixed;
      return this;
    }

    public final RadioStatus build() {
      return new RadioStatus(rssi, remrssi, txbuf, noise, remnoise, rxerrors, fixed);
    }
  }
}
